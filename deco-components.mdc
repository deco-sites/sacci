# Topologia de Componentes - Deco.cx

## Estrutura de Componentes no Deco

### üìÅ **sections/**

**Componentes dispon√≠veis no CMS para o usu√°rio escolher**

```
sections/
‚îú‚îÄ‚îÄ Hero.tsx           # Se√ß√£o Hero dispon√≠vel no CMS
‚îú‚îÄ‚îÄ Footer.tsx         # Se√ß√£o Footer dispon√≠vel no CMS
‚îú‚îÄ‚îÄ ProductGrid.tsx    # Se√ß√£o de produtos dispon√≠vel no CMS
‚îî‚îÄ‚îÄ Theme/
    ‚îî‚îÄ‚îÄ Theme.tsx      # Configura√ß√£o de tema
```

**Caracter√≠sticas:**

- ‚úÖ Aparecem no Visual Editor do Deco
- ‚úÖ Usu√°rio pode arrastar e soltar
- ‚úÖ T√™m interface para edi√ß√£o de props
- ‚úÖ S√£o exportados no `manifest.gen.ts`

**Template de Section:**

```tsx
// sections/Hero.tsx
interface Props {
  /*
    @title T√≠tulo
    */
  title: string;
  subtitle?: string;
  backgroundImage?: string;
}

export default function Hero({ title, subtitle, backgroundImage }: Props) {
  return (
    <section className="hero">
      <div
        className="hero-bg"
        style={{ backgroundImage: `url(${backgroundImage})` }}
      >
        <h1>{title}</h1>
        {subtitle && <p>{subtitle}</p>}
      </div>
    </section>
  );
}
```

### üìÅ **components/**

**Todos os componentes reutiliz√°veis usados internamente**

```
components/
‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx     # Componente Button reutiliz√°vel
‚îÇ   ‚îú‚îÄ‚îÄ Card.tsx       # Componente Card reutiliz√°vel
‚îÇ   ‚îî‚îÄ‚îÄ Icon.tsx       # Componente Icon reutiliz√°vel
‚îú‚îÄ‚îÄ forms/
‚îÇ   ‚îú‚îÄ‚îÄ ContactForm.tsx
‚îÇ   ‚îî‚îÄ‚îÄ NewsletterForm.tsx
‚îî‚îÄ‚îÄ layout/
    ‚îú‚îÄ‚îÄ Header.tsx
    ‚îî‚îÄ‚îÄ Navigation.tsx
```

**Caracter√≠sticas:**

- ‚ùå N√ÉO aparecem no Visual Editor
- ‚úÖ S√£o reutilizados pelas sections
- ‚úÖ Podem ser importados em qualquer lugar
- ‚úÖ Focados em funcionalidade espec√≠fica

**Template de Component:**

```tsx
// components/ui/Button.tsx
interface ButtonProps {
  variant?: "primary" | "secondary" | "outline";
  size?: "sm" | "md" | "lg";
  children: React.ReactNode;
  onClick?: () => void;
}

export default function Button({
  variant = "primary",
  size = "md",
  children,
  onClick,
}: ButtonProps) {
  return (
    <button className={`btn btn-${variant} btn-${size}`} onClick={onClick}>
      {children}
    </button>
  );
}
```

## Fluxo de Desenvolvimento

### 1. **Criar Component Base**

```bash
# Primeiro, criar o componente reutiliz√°vel
touch components/ui/ProductCard.tsx
```

```tsx
// components/ui/ProductCard.tsx
interface ProductCardProps {
  title: string;
  price: number;
  image: string;
  description?: string;
}

export default function ProductCard({
  title,
  price,
  image,
  description,
}: ProductCardProps) {
  return (
    <div className="product-card">
      <img src={image} alt={title} />
      <h3>{title}</h3>
      <p className="price">${price}</p>
      {description && <p className="description">{description}</p>}
    </div>
  );
}
```

### 2. **Criar Section que usa o Component**

```bash
# Depois, criar a section que aparece no CMS
touch sections/ProductGrid.tsx
```

```tsx
// sections/ProductGrid.tsx
import ProductCard from "../components/ui/ProductCard.tsx";

interface Product {
  title: string;
  price: number;
  image: string;
  description?: string;
}

interface Props {
  title: string;
  products: Product[];
  columns?: number;
}

export default function ProductGrid({ title, products, columns = 3 }: Props) {
  return (
    <section className="product-grid">
      <h2>{title}</h2>
      <div className={`grid grid-cols-${columns} gap-4`}>
        {products.map((product, index) => (
          <ProductCard key={index} {...product} />
        ))}
      </div>
    </section>
  );
}
```

### 3. **Gerar Manifest**

```bash
deno task gen
```

Isso vai adicionar a section no `manifest.gen.ts`:

```ts
// manifest.gen.ts (gerado automaticamente)
const manifest = {
  sections: {
    "site/sections/ProductGrid.tsx": ProductGrid,
    // ... outras sections
  },
  // ...
};
```

## Melhores Pr√°ticas

### **Para Sections:**

‚úÖ **Fa√ßa:**

- Props bem definidas e tipadas
- Interface amig√°vel para o usu√°rio do CMS
- Valores padr√£o sensatos
- Responsive design

‚ùå **Evite:**

- L√≥gica complexa de neg√≥cio
- Chamadas diretas de API
- Estados complexos

### **Para Components:**

‚úÖ **Fa√ßa:**

- Componentes pequenos e focados
- Reutiliza√ß√£o m√°xima
- Props flex√≠veis
- Testes unit√°rios

‚ùå **Evite:**

- Componentes muito espec√≠ficos
- Depend√™ncias desnecess√°rias
- Props demais

## Exemplo Completo

### Component Base

```tsx
// components/ui/Card.tsx
interface CardProps {
  title: string;
  content: string;
  image?: string;
  variant?: "default" | "featured";
}

export default function Card({
  title,
  content,
  image,
  variant = "default",
}: CardProps) {
  return (
    <div className={`card ${variant === "featured" ? "card-featured" : ""}`}>
      {image && <img src={image} alt={title} />}
      <div className="card-content">
        <h3>{title}</h3>
        <p>{content}</p>
      </div>
    </div>
  );
}
```

### Section que usa o Component

```tsx
// sections/CardSection.tsx
import Card from "../components/ui/Card.tsx";

interface CardData {
  title: string;
  content: string;
  image?: string;
  featured?: boolean;
}

interface Props {
  sectionTitle: string;
  cards: CardData[];
  backgroundColor?: string;
}

export default function CardSection({
  sectionTitle,
  cards,
  backgroundColor = "#ffffff",
}: Props) {
  return (
    <section className="card-section py-12" style={{ backgroundColor }}>
      <div className="container mx-auto">
        <h2 className="text-3xl font-bold mb-8">{sectionTitle}</h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {cards.map((card, index) => (
            <Card
              key={index}
              title={card.title}
              content={card.content}
              image={card.image}
              variant={card.featured ? "featured" : "default"}
            />
          ))}
        </div>
      </div>
    </section>
  );
}
```

**Resumo da Topologia:**

- **sections/** = Vai para o CMS (usu√°rio v√™ e configura)
- **components/** = Reutiliz√°veis internos (dev usa)
- **Sempre criar component primeiro, depois section que usa**
  description:
  globs:
  alwaysApply: false

---
